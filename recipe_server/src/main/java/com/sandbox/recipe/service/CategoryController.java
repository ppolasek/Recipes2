/* Copyright 2017 Philip Polasek. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */
package com.sandbox.recipe.service;

import com.sandbox.recipe.domain.Category;
import com.sandbox.recipe.domain.Recipe;
import com.sandbox.recipe.repository.CategoryRepository;
import com.sandbox.recipe.repository.RecipeRepository;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * --- TODO: Class comments go here ---
 *
 * <b><pre>
 * Copyright 2017 Philip Polasek.
 * All rights reserved.
 * </pre></b>
 *
 * @author ppolasek
 */
@RestController
public class CategoryController {
    @Autowired // This means to get the bean called CategoryRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CategoryRepository _categoryRepository;

    @Autowired
    private RecipeRepository _recipeRepository;

    private static final List<Category> _coreCategories = Arrays.asList(
            new Category("gallery/breakfast.jpeg", "Breakfast", "Get your morning going"),
            new Category("gallery/lunch.jpeg", "Lunch", "Mid-day meals"),
            new Category("gallery/dinner.jpeg", "Dinner", "A real meal"),
            new Category("gallery/appetizers.jpeg", "Appetizers", "Great snacks before dinner"),
            new Category("gallery/desserts.jpeg", "Desserts", "My favorite category!"));

    @CrossOrigin
    @RequestMapping("/getAllCategories")
    public List<Category> getAllCategories() {
        System.out.println("getAllCategories()");
        List<Category> categories = new ArrayList<>();

        _categoryRepository.findAll().forEach(categories::add);
        System.out.println("getAllCategories() categories.size() = " + categories.size());

        if (CollectionUtils.isEmpty(categories)) {
            System.out.println("getAllCategories() categories list is empty. adding core list of categories now");
            _coreCategories.stream().unordered()
                    .forEach(_categoryRepository::save);

            _categoryRepository.findAll().forEach(categories::add);
            System.out.println("getAllCategories() 2 categories.size() = " + categories.size());
        }

        // this works
//        List<Recipe> recipes = _recipeRepository.findTop2ByOrderByIdDesc(); // findAllByOrderByIdDesc();
//        System.out.println("getAllCategories() recipes.size() = " + (recipes != null ? recipes.size() : "null"));
//        if (CollectionUtils.isNotEmpty(recipes)) {
//            recipes.stream().unordered().forEach((recipe) -> System.out.println("getAllCategories() recipe = " + recipe));
//        }
        
        return categories;
    }
}
